import type { Metadata } from "next";
import { Inter, Outfit, Roboto } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/sonner";
import { EdgeStoreProvider } from "@/lib/edgestore";
import { QueryClient } from "@tanstack/react-query";
import { ReactQueryClientProvider } from "@/components/ReactQueryClientProvider";
import dynamic from "next/dynamic";
import { UserProvider } from "@/context/app.context";
import { cookies } from "next/headers";
import "@uploadthing/react/styles.css";
import Providers from "@/components/layout/provider";
import StreamVideoProvider from "@/components/layout/StreamClientProvider";
const inter = Inter({ subsets: ["latin"] });
import { NextUIProvider } from "@nextui-org/react";
import "flatpickr/dist/flatpickr.min.css";

import { ToastContainer } from "react-toastify";
import { Suspense } from "react";
import Loading from "./loading";
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
const queryClient = new QueryClient();
const ReduxProvider = dynamic(() => import("@/redux/Providers"), {
  ssr: false,
});
export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const cookieStore = cookies();
  const sessionToken = cookieStore.get("accesstoken");
  return (
    <html lang="en">
      <body className={inter.className}>
        <ReactQueryClientProvider>
          <EdgeStoreProvider>
            <ReduxProvider>
              {/* <Providers> */}
              <StreamVideoProvider>
                <NextUIProvider>
                  <UserProvider inititalAccessToken={sessionToken?.value}>
                    <Toaster />
                    <Suspense fallback={<Loading />}>{children}</Suspense>
                  </UserProvider>
                </NextUIProvider>
              </StreamVideoProvider>
              {/* </Providers> */}
            </ReduxProvider>
          </EdgeStoreProvider>
        </ReactQueryClientProvider>
      </body>
    </html>
  );
}
